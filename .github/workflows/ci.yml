name: CI

on:
  pull_request:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  RUSTFLAGS: "-C debuginfo=0 -D warnings"
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  tests:
    name: Tests
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.toolchain == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        toolchain: [stable, beta, nightly]
        include:
          - os: macos-latest
            MACOS: true
            sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
            sccache-download-target: apple-darwin
            # This can be moved to the "env:" section below once sccache is also working on Windows
            RUSTC_WRAPPER: sccache
          - os: windows-latest
          - os: ubuntu-latest
            sccache-path: /home/runner/.cache/sccache
            sccache-download-target: unknown-linux-musl
            # This can be moved to the "env:" section below once sccache is also working on Windows
            RUSTC_WRAPPER: sccache
    env:
      RUST_BACKTRACE: full
      #RUSTC_WRAPPER: sccache  # Can't set this until we've got Windows working, too
      RUSTV: ${{ matrix.toolchain }}
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_DIR: ${{ matrix.sccache-path }}
      SCCACHE_TARGET: ${{ matrix.sccache-download-target }}
      URL_BASE: https://github.com/mozilla/sccache/releases/download
      SCCACHE_VERSION: v0.2.15
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
      - uses: actions/checkout@v2

      - name: Install Linux deps alsa and udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
        if: runner.os == 'linux'

      - name: install ${{ matrix.toolchain }} toolchain
        id: install_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          # Don't use a 'components:' entry--we don't need them with beta/nightly, plus nightly often doesn't have them
          override: true

      - name: Install sccache
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-$SCCACHE_TARGET
          mkdir -p $HOME/.local/bin
          curl -L "$URL_BASE/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          chmod +x $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        if: matrix.os != 'windows-latest'

      - name: Fetch cargo registry cache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
          # restore-keys: |
          #   ${{ runner.os }}-cargo-${{ matrix.toolchain }}-
        if: matrix.os != 'windows-latest'

      - name: Fetch sccache cache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ matrix.sccache-path }}
          key: ${{ runner.os }}-sccache-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
          # restore-keys: |
          #   ${{ runner.os }}-sccache-${{ matrix.toolchain }}-
        if: matrix.os != 'windows-latest'

      - name: Start sccache server
        run: sccache --start-server
        if: matrix.os != 'windows-latest'

      - name: rustfmt & clippy
        run: |
          rustup component add clippy rustfmt
          cargo clippy --workspace
          cargo fmt --all -- --check
        if: matrix.toolchain == 'stable' && matrix.os == 'ubuntu-latest'

      - run: cargo test --workspace --all-targets --all-features
        env:
          MACOS: ${{ matrix.MACOS }} # Used by some tests

      - name: Print sccache stats
        run: sccache --show-stats
        if: matrix.os != 'windows-latest'

      - name: Stop sccache server
        run: sccache --stop-server || true
        if: matrix.os != 'windows-latest'
